After setting up the working environment, we will execute the process using a job scheduler based on SLURM.

To accomplish this, we will navigate to the directory containing the raw data (raw_data) and create two new files: trimmomatic_job.sh and auto_trim.sh.

The trimmomatic_job.sh file is a job script that provides detailed execution instructions to the server. The auto_trim.sh file is a Python script that automates the execution of Trimmomatic. 
Although adapted, this script was originally written in Python and can be accessed here: GitHub repository-  https://github.com/lakhujanivijay/I-Shell-Do-This/tree/master/automation_of_trimmomatic

Please make sure to reference the developers in your study.

####################################################################################################################################################
Exemplo of "job". 

#Trimmomatic_job.sh Github : https://github.com/TiagoBelintani/Trim_UCE_reads_trimmmomatic/blob/main/trimmomatic_job.sh


Instructions for Path Modification
To execute this script, make sure to change the paths in the following lines:

Line 8: Modify the path to the Conda environment if necessary. The current path is /home/tiagobelintani/miniconda3/envs/phylogenetic.
Line 11: Update the INPUT_DIR variable to the directory where your raw data files are stored.
Line 14: Set the OUTPUT_DIR variable to the directory where you want the trimmed data to be saved.
Line 15: Ensure that the path to auto_trim.sh is correct. If the script is not in the same directory as this SLURM script, provide the full path.
Make sure these paths match your actual file locations and environment before running the script.

Detailed Explanation
SLURM Header:

#!/bin/bash: Defines the interpreter to be used.
#SBATCH -t 20:00:00: Sets the maximum job runtime (20 hours).
#SBATCH -c 40: Sets the number of CPU cores per task.
#SBATCH --mail-user=tiago.belintani@unesp.br: Defines the email address for notifications.
#SBATCH --mail-type=ALL: Specifies the types of email notifications to be sent (ALL sends notifications at the start, end, and in case of failures).
Load and Activate Environment:

module load miniconda/3-2023-09: Loads the Miniconda module.
source activate /home/tiagobelintani/miniconda3/envs/phylogenetic: Activates the desired Conda environment.
Define Directories:

INPUT_DIR: Directory where the input files are located.
OUTPUT_DIR: Directory where the processed files will be saved.
Create Output Directory:

mkdir -p $OUTPUT_DIR: Creates the output directory if it does not already exist.
Get List of Files:

FILES=($INPUT_DIR/*.fastq.gz): Retrieves the list of .fastq.gz files in the input directory.
Check for Files:

Checks if files were found and prints an error message if no files are found.
Execute Processing Script:

source /path/to/auto_trim.sh "${FILES[@]}": Executes the auto_trim.sh script, passing all found files as arguments. Replace /path/to/auto_trim.sh with the actual path to the script.
Customization
Path to auto_trim.sh: Make sure the path to the auto_trim.sh script is correct. If the script is in the same directory as the SLURM script, you can use source auto_trim.sh directly.

Computational Resources: Adjust SLURM parameters (-t and -c) as needed for your specific job.

####################################################################################################################################################
auto_trim.sh

Important: Renaming Raw Data Files
Before executing the script, it is crucial to rename the raw data files to match the required format. 
Specifically, you need to change the names from read_2.fastq.gz and read_1.fastq.gz to read_R1.fastq.gz and read_R2.fastq.gz, respectively.

rename 's/_1/_R1/' *.fastq.gz
rename 's/_2/_R2/' *.fastq.gz

or 

# Rename files with _1 to _R1
for file in *_1.fastq.gz; do
    mv "$file" "$(echo "$file" | sed 's/_1/_R1/')"
done

# Rename files with _2 to _R2
for file in *_2.fastq.gz; do
    mv "$file" "$(echo "$file" | sed 's/_2/_R2/')"
done

or

ls *_1.fastq.gz | parallel 'mv {} {.}_R1.fastq.gz'
ls *_2.fastq.gz | parallel 'mv {} {.}_R2.fastq.gz'


Script Adjustments
To ensure the script runs correctly, you need to modify the paths in the following lines:

Line 87: Update the path to the Trimmomatic JAR file if it is located in a different directory or if the filename is different. Currently, it is set to /home/tiagobelintani/programas/Trimmomatic-0.39/trimmomatic-0.39.jar.

Line 92: Adjust the path to the adapters file used by Trimmomatic. The current path is /home/tiagobelintani/programas/Trimmomatic-0.39/adapters/TruSeq3-PE.fa. Ensure this path points to the correct adapters file for your analysis.

Sample Script Adjustments
Here is the modified section of the script with placeholders for your paths:

# Example of Trimmomatic command
date && time java -jar \
    /path/to/trimmomatic.jar \       # Update this path
    PE \
    -threads 40 \
    -phred33 $R1 $R2 $R1_pair $R1_unpair $R2_pair $R2_unpair \
    HEADCROP:7 \
    ILLUMINACLIP:/path/to/adapters.fa:2:30:10:2:keepBothReads \  # Update this path
    LEADING:20 \
    TRAILING:20 \
    SLIDINGWINDOW:05:20 \
    MINLEN:50


Error Handling
File Not Found: Displays an error if no files with the specified extension are found.
Filename Error: Ensures that paired-end files are named correctly with _R1 and _R2.
File Extension Error: Validates that file extensions are supported.
Make sure to replace the placeholder paths with the actual paths relevant to your setup before running the script.













